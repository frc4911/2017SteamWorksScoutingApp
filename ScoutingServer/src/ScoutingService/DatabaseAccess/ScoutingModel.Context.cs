//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Org.USFirst.Frc.Team4911.ScoutingService.DatabaseAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ScoutingEntities : DbContext
    {
        public ScoutingEntities()
            : base("name=ScoutingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<EventMatchResult> EventMatchResults { get; set; }
        public virtual DbSet<EventMatchScores2017> EventMatchScores2017 { get; set; }
        public virtual DbSet<EventMatchTeam> EventMatchTeams { get; set; }
        public virtual DbSet<EventRanking> EventRankings { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<Registration> Registrations { get; set; }
        public virtual DbSet<ScoutDataHopperAttempt> ScoutDataHopperAttempts { get; set; }
        public virtual DbSet<ScoutingDataAutonomou> ScoutingDataAutonomous { get; set; }
        public virtual DbSet<ScoutingDataEndGame> ScoutingDataEndGames { get; set; }
        public virtual DbSet<ScoutingDataFileLog> ScoutingDataFileLogs { get; set; }
        public virtual DbSet<ScoutingDataGearAttempt> ScoutingDataGearAttempts { get; set; }
        public virtual DbSet<ScoutingDataMatch> ScoutingDataMatches { get; set; }
        public virtual DbSet<ScoutingDataPreGame> ScoutingDataPreGames { get; set; }
        public virtual DbSet<ScoutingDataQualitative> ScoutingDataQualitatives { get; set; }
        public virtual DbSet<ScoutingDataShotAttempt> ScoutingDataShotAttempts { get; set; }
        public virtual DbSet<ScoutingDataTeleop> ScoutingDataTeleops { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
    
        public virtual int Delete_District(Nullable<int> season, string districtCode)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_District", seasonParameter, districtCodeParameter);
        }
    
        public virtual int Delete_Event(Nullable<int> season, string eventCode)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Event", seasonParameter, eventCodeParameter);
        }
    
        public virtual int Delete_EventMatchResult(Nullable<int> season, string eventCode, string tournamentLevel, Nullable<int> matchNumber)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var tournamentLevelParameter = tournamentLevel != null ?
                new ObjectParameter("TournamentLevel", tournamentLevel) :
                new ObjectParameter("TournamentLevel", typeof(string));
    
            var matchNumberParameter = matchNumber.HasValue ?
                new ObjectParameter("MatchNumber", matchNumber) :
                new ObjectParameter("MatchNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_EventMatchResult", seasonParameter, eventCodeParameter, tournamentLevelParameter, matchNumberParameter);
        }
    
        public virtual int Delete_EventMatchScore2017(string eventCode, string tournamentLevel, Nullable<int> matchNumber)
        {
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var tournamentLevelParameter = tournamentLevel != null ?
                new ObjectParameter("TournamentLevel", tournamentLevel) :
                new ObjectParameter("TournamentLevel", typeof(string));
    
            var matchNumberParameter = matchNumber.HasValue ?
                new ObjectParameter("MatchNumber", matchNumber) :
                new ObjectParameter("MatchNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_EventMatchScore2017", eventCodeParameter, tournamentLevelParameter, matchNumberParameter);
        }
    
        public virtual int Delete_EventMatchTeam(Nullable<int> season, string eventCode, Nullable<int> matchNumber, Nullable<int> teamNumber)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var matchNumberParameter = matchNumber.HasValue ?
                new ObjectParameter("MatchNumber", matchNumber) :
                new ObjectParameter("MatchNumber", typeof(int));
    
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_EventMatchTeam", seasonParameter, eventCodeParameter, matchNumberParameter, teamNumberParameter);
        }
    
        public virtual int Delete_EventRanking(Nullable<int> season, string eventCode, Nullable<int> teamNumber)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_EventRanking", seasonParameter, eventCodeParameter, teamNumberParameter);
        }
    
        public virtual int Delete_Registration(Nullable<int> season, Nullable<int> teamNumber)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Registration", seasonParameter, teamNumberParameter);
        }
    
        public virtual int Delete_Team(Nullable<int> teamNumber)
        {
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Team", teamNumberParameter);
        }
    
        public virtual int Insert_District(Nullable<int> season, string districtCode, string name)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_District", seasonParameter, districtCodeParameter, nameParameter);
        }
    
        public virtual int Insert_Event(Nullable<int> season, string eventCode, string districtCode, string divisionCode, string name, string type, string venue, string address, string city, string country, string stateProv, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, string webSite)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var divisionCodeParameter = divisionCode != null ?
                new ObjectParameter("DivisionCode", divisionCode) :
                new ObjectParameter("DivisionCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var venueParameter = venue != null ?
                new ObjectParameter("Venue", venue) :
                new ObjectParameter("Venue", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateProvParameter = stateProv != null ?
                new ObjectParameter("StateProv", stateProv) :
                new ObjectParameter("StateProv", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Event", seasonParameter, eventCodeParameter, districtCodeParameter, divisionCodeParameter, nameParameter, typeParameter, venueParameter, addressParameter, cityParameter, countryParameter, stateProvParameter, dateStartParameter, dateEndParameter, webSiteParameter);
        }
    
        public virtual int Insert_EventMatchScore2017(string eventCode, string tournamentLevel, Nullable<int> matchNumber, string alliance, string robot1Auto, string robot2Auto, string robot3Auto, Nullable<int> autoFuelLow, Nullable<int> autoFuelHigh, Nullable<bool> rotor1Auto, Nullable<bool> rotor2Auto, Nullable<bool> rotor1Engaged, Nullable<bool> rotor2Engaged, Nullable<bool> rotor3Engaged, Nullable<bool> rotor4Engaged, Nullable<int> teleopFuelLow, Nullable<int> teleopFuelHigh, string touchpadNear, string touchpadMiddle, string touchpadFar, Nullable<bool> kiloPaRankingPointAchieved, Nullable<bool> rotorRankingPointAchieved, Nullable<int> foulCount, Nullable<int> techFoulCount, Nullable<int> autoPoints, Nullable<int> autoMobilityPoints, Nullable<int> autoRotorPoints, Nullable<int> autoFuelPoints, Nullable<int> teleopPoints, Nullable<int> teleopRotorPoints, Nullable<int> teleopFuelPoints, Nullable<int> teleopTakeoffPoints, Nullable<int> kilokPaBonusPoints, Nullable<int> rotorBonusPoints, Nullable<int> adjustPoints, Nullable<int> foulPoints, Nullable<int> totalPoints)
        {
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var tournamentLevelParameter = tournamentLevel != null ?
                new ObjectParameter("TournamentLevel", tournamentLevel) :
                new ObjectParameter("TournamentLevel", typeof(string));
    
            var matchNumberParameter = matchNumber.HasValue ?
                new ObjectParameter("MatchNumber", matchNumber) :
                new ObjectParameter("MatchNumber", typeof(int));
    
            var allianceParameter = alliance != null ?
                new ObjectParameter("Alliance", alliance) :
                new ObjectParameter("Alliance", typeof(string));
    
            var robot1AutoParameter = robot1Auto != null ?
                new ObjectParameter("Robot1Auto", robot1Auto) :
                new ObjectParameter("Robot1Auto", typeof(string));
    
            var robot2AutoParameter = robot2Auto != null ?
                new ObjectParameter("Robot2Auto", robot2Auto) :
                new ObjectParameter("Robot2Auto", typeof(string));
    
            var robot3AutoParameter = robot3Auto != null ?
                new ObjectParameter("Robot3Auto", robot3Auto) :
                new ObjectParameter("Robot3Auto", typeof(string));
    
            var autoFuelLowParameter = autoFuelLow.HasValue ?
                new ObjectParameter("AutoFuelLow", autoFuelLow) :
                new ObjectParameter("AutoFuelLow", typeof(int));
    
            var autoFuelHighParameter = autoFuelHigh.HasValue ?
                new ObjectParameter("AutoFuelHigh", autoFuelHigh) :
                new ObjectParameter("AutoFuelHigh", typeof(int));
    
            var rotor1AutoParameter = rotor1Auto.HasValue ?
                new ObjectParameter("Rotor1Auto", rotor1Auto) :
                new ObjectParameter("Rotor1Auto", typeof(bool));
    
            var rotor2AutoParameter = rotor2Auto.HasValue ?
                new ObjectParameter("Rotor2Auto", rotor2Auto) :
                new ObjectParameter("Rotor2Auto", typeof(bool));
    
            var rotor1EngagedParameter = rotor1Engaged.HasValue ?
                new ObjectParameter("Rotor1Engaged", rotor1Engaged) :
                new ObjectParameter("Rotor1Engaged", typeof(bool));
    
            var rotor2EngagedParameter = rotor2Engaged.HasValue ?
                new ObjectParameter("Rotor2Engaged", rotor2Engaged) :
                new ObjectParameter("Rotor2Engaged", typeof(bool));
    
            var rotor3EngagedParameter = rotor3Engaged.HasValue ?
                new ObjectParameter("Rotor3Engaged", rotor3Engaged) :
                new ObjectParameter("Rotor3Engaged", typeof(bool));
    
            var rotor4EngagedParameter = rotor4Engaged.HasValue ?
                new ObjectParameter("Rotor4Engaged", rotor4Engaged) :
                new ObjectParameter("Rotor4Engaged", typeof(bool));
    
            var teleopFuelLowParameter = teleopFuelLow.HasValue ?
                new ObjectParameter("TeleopFuelLow", teleopFuelLow) :
                new ObjectParameter("TeleopFuelLow", typeof(int));
    
            var teleopFuelHighParameter = teleopFuelHigh.HasValue ?
                new ObjectParameter("TeleopFuelHigh", teleopFuelHigh) :
                new ObjectParameter("TeleopFuelHigh", typeof(int));
    
            var touchpadNearParameter = touchpadNear != null ?
                new ObjectParameter("TouchpadNear", touchpadNear) :
                new ObjectParameter("TouchpadNear", typeof(string));
    
            var touchpadMiddleParameter = touchpadMiddle != null ?
                new ObjectParameter("TouchpadMiddle", touchpadMiddle) :
                new ObjectParameter("TouchpadMiddle", typeof(string));
    
            var touchpadFarParameter = touchpadFar != null ?
                new ObjectParameter("TouchpadFar", touchpadFar) :
                new ObjectParameter("TouchpadFar", typeof(string));
    
            var kiloPaRankingPointAchievedParameter = kiloPaRankingPointAchieved.HasValue ?
                new ObjectParameter("KiloPaRankingPointAchieved", kiloPaRankingPointAchieved) :
                new ObjectParameter("KiloPaRankingPointAchieved", typeof(bool));
    
            var rotorRankingPointAchievedParameter = rotorRankingPointAchieved.HasValue ?
                new ObjectParameter("RotorRankingPointAchieved", rotorRankingPointAchieved) :
                new ObjectParameter("RotorRankingPointAchieved", typeof(bool));
    
            var foulCountParameter = foulCount.HasValue ?
                new ObjectParameter("FoulCount", foulCount) :
                new ObjectParameter("FoulCount", typeof(int));
    
            var techFoulCountParameter = techFoulCount.HasValue ?
                new ObjectParameter("TechFoulCount", techFoulCount) :
                new ObjectParameter("TechFoulCount", typeof(int));
    
            var autoPointsParameter = autoPoints.HasValue ?
                new ObjectParameter("AutoPoints", autoPoints) :
                new ObjectParameter("AutoPoints", typeof(int));
    
            var autoMobilityPointsParameter = autoMobilityPoints.HasValue ?
                new ObjectParameter("AutoMobilityPoints", autoMobilityPoints) :
                new ObjectParameter("AutoMobilityPoints", typeof(int));
    
            var autoRotorPointsParameter = autoRotorPoints.HasValue ?
                new ObjectParameter("AutoRotorPoints", autoRotorPoints) :
                new ObjectParameter("AutoRotorPoints", typeof(int));
    
            var autoFuelPointsParameter = autoFuelPoints.HasValue ?
                new ObjectParameter("AutoFuelPoints", autoFuelPoints) :
                new ObjectParameter("AutoFuelPoints", typeof(int));
    
            var teleopPointsParameter = teleopPoints.HasValue ?
                new ObjectParameter("TeleopPoints", teleopPoints) :
                new ObjectParameter("TeleopPoints", typeof(int));
    
            var teleopRotorPointsParameter = teleopRotorPoints.HasValue ?
                new ObjectParameter("TeleopRotorPoints", teleopRotorPoints) :
                new ObjectParameter("TeleopRotorPoints", typeof(int));
    
            var teleopFuelPointsParameter = teleopFuelPoints.HasValue ?
                new ObjectParameter("TeleopFuelPoints", teleopFuelPoints) :
                new ObjectParameter("TeleopFuelPoints", typeof(int));
    
            var teleopTakeoffPointsParameter = teleopTakeoffPoints.HasValue ?
                new ObjectParameter("TeleopTakeoffPoints", teleopTakeoffPoints) :
                new ObjectParameter("TeleopTakeoffPoints", typeof(int));
    
            var kilokPaBonusPointsParameter = kilokPaBonusPoints.HasValue ?
                new ObjectParameter("KilokPaBonusPoints", kilokPaBonusPoints) :
                new ObjectParameter("KilokPaBonusPoints", typeof(int));
    
            var rotorBonusPointsParameter = rotorBonusPoints.HasValue ?
                new ObjectParameter("RotorBonusPoints", rotorBonusPoints) :
                new ObjectParameter("RotorBonusPoints", typeof(int));
    
            var adjustPointsParameter = adjustPoints.HasValue ?
                new ObjectParameter("AdjustPoints", adjustPoints) :
                new ObjectParameter("AdjustPoints", typeof(int));
    
            var foulPointsParameter = foulPoints.HasValue ?
                new ObjectParameter("FoulPoints", foulPoints) :
                new ObjectParameter("FoulPoints", typeof(int));
    
            var totalPointsParameter = totalPoints.HasValue ?
                new ObjectParameter("TotalPoints", totalPoints) :
                new ObjectParameter("TotalPoints", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_EventMatchScore2017", eventCodeParameter, tournamentLevelParameter, matchNumberParameter, allianceParameter, robot1AutoParameter, robot2AutoParameter, robot3AutoParameter, autoFuelLowParameter, autoFuelHighParameter, rotor1AutoParameter, rotor2AutoParameter, rotor1EngagedParameter, rotor2EngagedParameter, rotor3EngagedParameter, rotor4EngagedParameter, teleopFuelLowParameter, teleopFuelHighParameter, touchpadNearParameter, touchpadMiddleParameter, touchpadFarParameter, kiloPaRankingPointAchievedParameter, rotorRankingPointAchievedParameter, foulCountParameter, techFoulCountParameter, autoPointsParameter, autoMobilityPointsParameter, autoRotorPointsParameter, autoFuelPointsParameter, teleopPointsParameter, teleopRotorPointsParameter, teleopFuelPointsParameter, teleopTakeoffPointsParameter, kilokPaBonusPointsParameter, rotorBonusPointsParameter, adjustPointsParameter, foulPointsParameter, totalPointsParameter);
        }
    
        public virtual int Insert_EventMatchTeam(Nullable<int> season, string eventCode, Nullable<int> matchNumber, Nullable<int> teamNumber, string station, Nullable<bool> dq)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var matchNumberParameter = matchNumber.HasValue ?
                new ObjectParameter("MatchNumber", matchNumber) :
                new ObjectParameter("MatchNumber", typeof(int));
    
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var dqParameter = dq.HasValue ?
                new ObjectParameter("Dq", dq) :
                new ObjectParameter("Dq", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_EventMatchTeam", seasonParameter, eventCodeParameter, matchNumberParameter, teamNumberParameter, stationParameter, dqParameter);
        }
    
        public virtual int Insert_EventRanking(Nullable<int> season, string eventCode, Nullable<int> teamNumber, Nullable<int> dqCount, Nullable<int> matchesPlayed, Nullable<double> qualAverage, Nullable<int> rank, Nullable<int> wins, Nullable<int> losses, Nullable<int> ties, Nullable<double> sortOrder1, Nullable<double> sortOrder2, Nullable<double> sortOrder3, Nullable<double> sortOrder4, Nullable<double> sortOrder5, Nullable<double> sortOrder6)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            var dqCountParameter = dqCount.HasValue ?
                new ObjectParameter("DqCount", dqCount) :
                new ObjectParameter("DqCount", typeof(int));
    
            var matchesPlayedParameter = matchesPlayed.HasValue ?
                new ObjectParameter("MatchesPlayed", matchesPlayed) :
                new ObjectParameter("MatchesPlayed", typeof(int));
    
            var qualAverageParameter = qualAverage.HasValue ?
                new ObjectParameter("QualAverage", qualAverage) :
                new ObjectParameter("QualAverage", typeof(double));
    
            var rankParameter = rank.HasValue ?
                new ObjectParameter("Rank", rank) :
                new ObjectParameter("Rank", typeof(int));
    
            var winsParameter = wins.HasValue ?
                new ObjectParameter("Wins", wins) :
                new ObjectParameter("Wins", typeof(int));
    
            var lossesParameter = losses.HasValue ?
                new ObjectParameter("Losses", losses) :
                new ObjectParameter("Losses", typeof(int));
    
            var tiesParameter = ties.HasValue ?
                new ObjectParameter("Ties", ties) :
                new ObjectParameter("Ties", typeof(int));
    
            var sortOrder1Parameter = sortOrder1.HasValue ?
                new ObjectParameter("SortOrder1", sortOrder1) :
                new ObjectParameter("SortOrder1", typeof(double));
    
            var sortOrder2Parameter = sortOrder2.HasValue ?
                new ObjectParameter("SortOrder2", sortOrder2) :
                new ObjectParameter("SortOrder2", typeof(double));
    
            var sortOrder3Parameter = sortOrder3.HasValue ?
                new ObjectParameter("SortOrder3", sortOrder3) :
                new ObjectParameter("SortOrder3", typeof(double));
    
            var sortOrder4Parameter = sortOrder4.HasValue ?
                new ObjectParameter("SortOrder4", sortOrder4) :
                new ObjectParameter("SortOrder4", typeof(double));
    
            var sortOrder5Parameter = sortOrder5.HasValue ?
                new ObjectParameter("SortOrder5", sortOrder5) :
                new ObjectParameter("SortOrder5", typeof(double));
    
            var sortOrder6Parameter = sortOrder6.HasValue ?
                new ObjectParameter("SortOrder6", sortOrder6) :
                new ObjectParameter("SortOrder6", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_EventRanking", seasonParameter, eventCodeParameter, teamNumberParameter, dqCountParameter, matchesPlayedParameter, qualAverageParameter, rankParameter, winsParameter, lossesParameter, tiesParameter, sortOrder1Parameter, sortOrder2Parameter, sortOrder3Parameter, sortOrder4Parameter, sortOrder5Parameter, sortOrder6Parameter);
        }
    
        public virtual int Insert_MatchEventResult(Nullable<int> season, string eventCode, Nullable<System.DateTime> actualStartTime, string tournamentLevel, Nullable<int> matchNumber, Nullable<System.DateTime> postResultTime, Nullable<int> scoreRedFinal, Nullable<int> scoreRedFoul, Nullable<int> scoreRedAuto, Nullable<int> scoreBlueFinal, Nullable<int> scoreBlueFoul, Nullable<int> scoreBlueAuto)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var actualStartTimeParameter = actualStartTime.HasValue ?
                new ObjectParameter("ActualStartTime", actualStartTime) :
                new ObjectParameter("ActualStartTime", typeof(System.DateTime));
    
            var tournamentLevelParameter = tournamentLevel != null ?
                new ObjectParameter("TournamentLevel", tournamentLevel) :
                new ObjectParameter("TournamentLevel", typeof(string));
    
            var matchNumberParameter = matchNumber.HasValue ?
                new ObjectParameter("MatchNumber", matchNumber) :
                new ObjectParameter("MatchNumber", typeof(int));
    
            var postResultTimeParameter = postResultTime.HasValue ?
                new ObjectParameter("PostResultTime", postResultTime) :
                new ObjectParameter("PostResultTime", typeof(System.DateTime));
    
            var scoreRedFinalParameter = scoreRedFinal.HasValue ?
                new ObjectParameter("ScoreRedFinal", scoreRedFinal) :
                new ObjectParameter("ScoreRedFinal", typeof(int));
    
            var scoreRedFoulParameter = scoreRedFoul.HasValue ?
                new ObjectParameter("ScoreRedFoul", scoreRedFoul) :
                new ObjectParameter("ScoreRedFoul", typeof(int));
    
            var scoreRedAutoParameter = scoreRedAuto.HasValue ?
                new ObjectParameter("ScoreRedAuto", scoreRedAuto) :
                new ObjectParameter("ScoreRedAuto", typeof(int));
    
            var scoreBlueFinalParameter = scoreBlueFinal.HasValue ?
                new ObjectParameter("ScoreBlueFinal", scoreBlueFinal) :
                new ObjectParameter("ScoreBlueFinal", typeof(int));
    
            var scoreBlueFoulParameter = scoreBlueFoul.HasValue ?
                new ObjectParameter("ScoreBlueFoul", scoreBlueFoul) :
                new ObjectParameter("ScoreBlueFoul", typeof(int));
    
            var scoreBlueAutoParameter = scoreBlueAuto.HasValue ?
                new ObjectParameter("ScoreBlueAuto", scoreBlueAuto) :
                new ObjectParameter("ScoreBlueAuto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_MatchEventResult", seasonParameter, eventCodeParameter, actualStartTimeParameter, tournamentLevelParameter, matchNumberParameter, postResultTimeParameter, scoreRedFinalParameter, scoreRedFoulParameter, scoreRedAutoParameter, scoreBlueFinalParameter, scoreBlueFoulParameter, scoreBlueAutoParameter);
        }
    
        public virtual int Insert_Registration(Nullable<int> season, Nullable<int> teamNumber, string eventCode)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Registration", seasonParameter, teamNumberParameter, eventCodeParameter);
        }
    
        public virtual int Insert_Team(Nullable<int> teamNumber, string shortName, string fullName, string city, string stateProv, string country, string districtCode, Nullable<int> rookieYear, string robotName, string webSite, string schoolName, string homeCMP)
        {
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateProvParameter = stateProv != null ?
                new ObjectParameter("StateProv", stateProv) :
                new ObjectParameter("StateProv", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var rookieYearParameter = rookieYear.HasValue ?
                new ObjectParameter("RookieYear", rookieYear) :
                new ObjectParameter("RookieYear", typeof(int));
    
            var robotNameParameter = robotName != null ?
                new ObjectParameter("RobotName", robotName) :
                new ObjectParameter("RobotName", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var homeCMPParameter = homeCMP != null ?
                new ObjectParameter("HomeCMP", homeCMP) :
                new ObjectParameter("HomeCMP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Team", teamNumberParameter, shortNameParameter, fullNameParameter, cityParameter, stateProvParameter, countryParameter, districtCodeParameter, rookieYearParameter, robotNameParameter, webSiteParameter, schoolNameParameter, homeCMPParameter);
        }
    
        public virtual int Update_District(Nullable<int> season, string districtCode, string name)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_District", seasonParameter, districtCodeParameter, nameParameter);
        }
    
        public virtual int Update_Event(Nullable<int> season, string eventCode, string districtCode, string divisionCode, string name, string type, string venue, string address, string city, string country, string stateProv, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd, string webSite)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var divisionCodeParameter = divisionCode != null ?
                new ObjectParameter("DivisionCode", divisionCode) :
                new ObjectParameter("DivisionCode", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var venueParameter = venue != null ?
                new ObjectParameter("Venue", venue) :
                new ObjectParameter("Venue", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateProvParameter = stateProv != null ?
                new ObjectParameter("StateProv", stateProv) :
                new ObjectParameter("StateProv", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Event", seasonParameter, eventCodeParameter, districtCodeParameter, divisionCodeParameter, nameParameter, typeParameter, venueParameter, addressParameter, cityParameter, countryParameter, stateProvParameter, dateStartParameter, dateEndParameter, webSiteParameter);
        }
    
        public virtual int Update_EventMatchResult(Nullable<int> season, string eventCode, Nullable<System.DateTime> actualStartTime, string tournamentLevel, Nullable<int> matchNumber, Nullable<System.DateTime> postResultTime, Nullable<int> scoreRedFinal, Nullable<int> scoreRedFoul, Nullable<int> scoreRedAuto, Nullable<int> scoreBlueFinal, Nullable<int> scoreBlueFoul, Nullable<int> scoreBlueAuto)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var actualStartTimeParameter = actualStartTime.HasValue ?
                new ObjectParameter("ActualStartTime", actualStartTime) :
                new ObjectParameter("ActualStartTime", typeof(System.DateTime));
    
            var tournamentLevelParameter = tournamentLevel != null ?
                new ObjectParameter("TournamentLevel", tournamentLevel) :
                new ObjectParameter("TournamentLevel", typeof(string));
    
            var matchNumberParameter = matchNumber.HasValue ?
                new ObjectParameter("MatchNumber", matchNumber) :
                new ObjectParameter("MatchNumber", typeof(int));
    
            var postResultTimeParameter = postResultTime.HasValue ?
                new ObjectParameter("PostResultTime", postResultTime) :
                new ObjectParameter("PostResultTime", typeof(System.DateTime));
    
            var scoreRedFinalParameter = scoreRedFinal.HasValue ?
                new ObjectParameter("ScoreRedFinal", scoreRedFinal) :
                new ObjectParameter("ScoreRedFinal", typeof(int));
    
            var scoreRedFoulParameter = scoreRedFoul.HasValue ?
                new ObjectParameter("ScoreRedFoul", scoreRedFoul) :
                new ObjectParameter("ScoreRedFoul", typeof(int));
    
            var scoreRedAutoParameter = scoreRedAuto.HasValue ?
                new ObjectParameter("ScoreRedAuto", scoreRedAuto) :
                new ObjectParameter("ScoreRedAuto", typeof(int));
    
            var scoreBlueFinalParameter = scoreBlueFinal.HasValue ?
                new ObjectParameter("ScoreBlueFinal", scoreBlueFinal) :
                new ObjectParameter("ScoreBlueFinal", typeof(int));
    
            var scoreBlueFoulParameter = scoreBlueFoul.HasValue ?
                new ObjectParameter("ScoreBlueFoul", scoreBlueFoul) :
                new ObjectParameter("ScoreBlueFoul", typeof(int));
    
            var scoreBlueAutoParameter = scoreBlueAuto.HasValue ?
                new ObjectParameter("ScoreBlueAuto", scoreBlueAuto) :
                new ObjectParameter("ScoreBlueAuto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_EventMatchResult", seasonParameter, eventCodeParameter, actualStartTimeParameter, tournamentLevelParameter, matchNumberParameter, postResultTimeParameter, scoreRedFinalParameter, scoreRedFoulParameter, scoreRedAutoParameter, scoreBlueFinalParameter, scoreBlueFoulParameter, scoreBlueAutoParameter);
        }
    
        public virtual int Update_EventMatchScore2017(string eventCode, string tournamentLevel, Nullable<int> matchNumber, string alliance, string robot1Auto, string robot2Auto, string robot3Auto, Nullable<int> autoFuelLow, Nullable<int> autoFuelHigh, Nullable<bool> rotor1Auto, Nullable<bool> rotor2Auto, Nullable<bool> rotor1Engaged, Nullable<bool> rotor2Engaged, Nullable<bool> rotor3Engaged, Nullable<bool> rotor4Engaged, Nullable<int> teleopFuelLow, Nullable<int> teleopFuelHigh, string touchpadNear, string touchpadMiddle, string touchpadFar, Nullable<bool> kiloPaRankingPointAchieved, Nullable<bool> rotorRankingPointAchieved, Nullable<int> foulCount, Nullable<int> techFoulCount, Nullable<int> autoPoints, Nullable<int> autoMobilityPoints, Nullable<int> autoRotorPoints, Nullable<int> autoFuelPoints, Nullable<int> teleopPoints, Nullable<int> teleopRotorPoints, Nullable<int> teleopFuelPoints, Nullable<int> teleopTakeoffPoints, Nullable<int> kilokPaBonusPoints, Nullable<int> rotorBonusPoints, Nullable<int> adjustPoints, Nullable<int> foulPoints, Nullable<int> totalPoints)
        {
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var tournamentLevelParameter = tournamentLevel != null ?
                new ObjectParameter("TournamentLevel", tournamentLevel) :
                new ObjectParameter("TournamentLevel", typeof(string));
    
            var matchNumberParameter = matchNumber.HasValue ?
                new ObjectParameter("MatchNumber", matchNumber) :
                new ObjectParameter("MatchNumber", typeof(int));
    
            var allianceParameter = alliance != null ?
                new ObjectParameter("Alliance", alliance) :
                new ObjectParameter("Alliance", typeof(string));
    
            var robot1AutoParameter = robot1Auto != null ?
                new ObjectParameter("Robot1Auto", robot1Auto) :
                new ObjectParameter("Robot1Auto", typeof(string));
    
            var robot2AutoParameter = robot2Auto != null ?
                new ObjectParameter("Robot2Auto", robot2Auto) :
                new ObjectParameter("Robot2Auto", typeof(string));
    
            var robot3AutoParameter = robot3Auto != null ?
                new ObjectParameter("Robot3Auto", robot3Auto) :
                new ObjectParameter("Robot3Auto", typeof(string));
    
            var autoFuelLowParameter = autoFuelLow.HasValue ?
                new ObjectParameter("AutoFuelLow", autoFuelLow) :
                new ObjectParameter("AutoFuelLow", typeof(int));
    
            var autoFuelHighParameter = autoFuelHigh.HasValue ?
                new ObjectParameter("AutoFuelHigh", autoFuelHigh) :
                new ObjectParameter("AutoFuelHigh", typeof(int));
    
            var rotor1AutoParameter = rotor1Auto.HasValue ?
                new ObjectParameter("Rotor1Auto", rotor1Auto) :
                new ObjectParameter("Rotor1Auto", typeof(bool));
    
            var rotor2AutoParameter = rotor2Auto.HasValue ?
                new ObjectParameter("Rotor2Auto", rotor2Auto) :
                new ObjectParameter("Rotor2Auto", typeof(bool));
    
            var rotor1EngagedParameter = rotor1Engaged.HasValue ?
                new ObjectParameter("Rotor1Engaged", rotor1Engaged) :
                new ObjectParameter("Rotor1Engaged", typeof(bool));
    
            var rotor2EngagedParameter = rotor2Engaged.HasValue ?
                new ObjectParameter("Rotor2Engaged", rotor2Engaged) :
                new ObjectParameter("Rotor2Engaged", typeof(bool));
    
            var rotor3EngagedParameter = rotor3Engaged.HasValue ?
                new ObjectParameter("Rotor3Engaged", rotor3Engaged) :
                new ObjectParameter("Rotor3Engaged", typeof(bool));
    
            var rotor4EngagedParameter = rotor4Engaged.HasValue ?
                new ObjectParameter("Rotor4Engaged", rotor4Engaged) :
                new ObjectParameter("Rotor4Engaged", typeof(bool));
    
            var teleopFuelLowParameter = teleopFuelLow.HasValue ?
                new ObjectParameter("TeleopFuelLow", teleopFuelLow) :
                new ObjectParameter("TeleopFuelLow", typeof(int));
    
            var teleopFuelHighParameter = teleopFuelHigh.HasValue ?
                new ObjectParameter("TeleopFuelHigh", teleopFuelHigh) :
                new ObjectParameter("TeleopFuelHigh", typeof(int));
    
            var touchpadNearParameter = touchpadNear != null ?
                new ObjectParameter("TouchpadNear", touchpadNear) :
                new ObjectParameter("TouchpadNear", typeof(string));
    
            var touchpadMiddleParameter = touchpadMiddle != null ?
                new ObjectParameter("TouchpadMiddle", touchpadMiddle) :
                new ObjectParameter("TouchpadMiddle", typeof(string));
    
            var touchpadFarParameter = touchpadFar != null ?
                new ObjectParameter("TouchpadFar", touchpadFar) :
                new ObjectParameter("TouchpadFar", typeof(string));
    
            var kiloPaRankingPointAchievedParameter = kiloPaRankingPointAchieved.HasValue ?
                new ObjectParameter("KiloPaRankingPointAchieved", kiloPaRankingPointAchieved) :
                new ObjectParameter("KiloPaRankingPointAchieved", typeof(bool));
    
            var rotorRankingPointAchievedParameter = rotorRankingPointAchieved.HasValue ?
                new ObjectParameter("RotorRankingPointAchieved", rotorRankingPointAchieved) :
                new ObjectParameter("RotorRankingPointAchieved", typeof(bool));
    
            var foulCountParameter = foulCount.HasValue ?
                new ObjectParameter("FoulCount", foulCount) :
                new ObjectParameter("FoulCount", typeof(int));
    
            var techFoulCountParameter = techFoulCount.HasValue ?
                new ObjectParameter("TechFoulCount", techFoulCount) :
                new ObjectParameter("TechFoulCount", typeof(int));
    
            var autoPointsParameter = autoPoints.HasValue ?
                new ObjectParameter("AutoPoints", autoPoints) :
                new ObjectParameter("AutoPoints", typeof(int));
    
            var autoMobilityPointsParameter = autoMobilityPoints.HasValue ?
                new ObjectParameter("AutoMobilityPoints", autoMobilityPoints) :
                new ObjectParameter("AutoMobilityPoints", typeof(int));
    
            var autoRotorPointsParameter = autoRotorPoints.HasValue ?
                new ObjectParameter("AutoRotorPoints", autoRotorPoints) :
                new ObjectParameter("AutoRotorPoints", typeof(int));
    
            var autoFuelPointsParameter = autoFuelPoints.HasValue ?
                new ObjectParameter("AutoFuelPoints", autoFuelPoints) :
                new ObjectParameter("AutoFuelPoints", typeof(int));
    
            var teleopPointsParameter = teleopPoints.HasValue ?
                new ObjectParameter("TeleopPoints", teleopPoints) :
                new ObjectParameter("TeleopPoints", typeof(int));
    
            var teleopRotorPointsParameter = teleopRotorPoints.HasValue ?
                new ObjectParameter("TeleopRotorPoints", teleopRotorPoints) :
                new ObjectParameter("TeleopRotorPoints", typeof(int));
    
            var teleopFuelPointsParameter = teleopFuelPoints.HasValue ?
                new ObjectParameter("TeleopFuelPoints", teleopFuelPoints) :
                new ObjectParameter("TeleopFuelPoints", typeof(int));
    
            var teleopTakeoffPointsParameter = teleopTakeoffPoints.HasValue ?
                new ObjectParameter("TeleopTakeoffPoints", teleopTakeoffPoints) :
                new ObjectParameter("TeleopTakeoffPoints", typeof(int));
    
            var kilokPaBonusPointsParameter = kilokPaBonusPoints.HasValue ?
                new ObjectParameter("KilokPaBonusPoints", kilokPaBonusPoints) :
                new ObjectParameter("KilokPaBonusPoints", typeof(int));
    
            var rotorBonusPointsParameter = rotorBonusPoints.HasValue ?
                new ObjectParameter("RotorBonusPoints", rotorBonusPoints) :
                new ObjectParameter("RotorBonusPoints", typeof(int));
    
            var adjustPointsParameter = adjustPoints.HasValue ?
                new ObjectParameter("AdjustPoints", adjustPoints) :
                new ObjectParameter("AdjustPoints", typeof(int));
    
            var foulPointsParameter = foulPoints.HasValue ?
                new ObjectParameter("FoulPoints", foulPoints) :
                new ObjectParameter("FoulPoints", typeof(int));
    
            var totalPointsParameter = totalPoints.HasValue ?
                new ObjectParameter("TotalPoints", totalPoints) :
                new ObjectParameter("TotalPoints", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_EventMatchScore2017", eventCodeParameter, tournamentLevelParameter, matchNumberParameter, allianceParameter, robot1AutoParameter, robot2AutoParameter, robot3AutoParameter, autoFuelLowParameter, autoFuelHighParameter, rotor1AutoParameter, rotor2AutoParameter, rotor1EngagedParameter, rotor2EngagedParameter, rotor3EngagedParameter, rotor4EngagedParameter, teleopFuelLowParameter, teleopFuelHighParameter, touchpadNearParameter, touchpadMiddleParameter, touchpadFarParameter, kiloPaRankingPointAchievedParameter, rotorRankingPointAchievedParameter, foulCountParameter, techFoulCountParameter, autoPointsParameter, autoMobilityPointsParameter, autoRotorPointsParameter, autoFuelPointsParameter, teleopPointsParameter, teleopRotorPointsParameter, teleopFuelPointsParameter, teleopTakeoffPointsParameter, kilokPaBonusPointsParameter, rotorBonusPointsParameter, adjustPointsParameter, foulPointsParameter, totalPointsParameter);
        }
    
        public virtual int Update_EventMatchTeam(Nullable<int> season, string eventCode, Nullable<int> matchNumber, Nullable<int> teamNumber, string station, Nullable<bool> dq)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var matchNumberParameter = matchNumber.HasValue ?
                new ObjectParameter("MatchNumber", matchNumber) :
                new ObjectParameter("MatchNumber", typeof(int));
    
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            var stationParameter = station != null ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(string));
    
            var dqParameter = dq.HasValue ?
                new ObjectParameter("Dq", dq) :
                new ObjectParameter("Dq", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_EventMatchTeam", seasonParameter, eventCodeParameter, matchNumberParameter, teamNumberParameter, stationParameter, dqParameter);
        }
    
        public virtual int Update_EventRanking(Nullable<int> season, string eventCode, Nullable<int> teamNumber, Nullable<int> dqCount, Nullable<int> matchesPlayed, Nullable<double> qualAverage, Nullable<int> rank, Nullable<int> wins, Nullable<int> losses, Nullable<int> ties, Nullable<double> sortOrder1, Nullable<double> sortOrder2, Nullable<double> sortOrder3, Nullable<double> sortOrder4, Nullable<double> sortOrder5, Nullable<double> sortOrder6)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            var dqCountParameter = dqCount.HasValue ?
                new ObjectParameter("DqCount", dqCount) :
                new ObjectParameter("DqCount", typeof(int));
    
            var matchesPlayedParameter = matchesPlayed.HasValue ?
                new ObjectParameter("MatchesPlayed", matchesPlayed) :
                new ObjectParameter("MatchesPlayed", typeof(int));
    
            var qualAverageParameter = qualAverage.HasValue ?
                new ObjectParameter("QualAverage", qualAverage) :
                new ObjectParameter("QualAverage", typeof(double));
    
            var rankParameter = rank.HasValue ?
                new ObjectParameter("Rank", rank) :
                new ObjectParameter("Rank", typeof(int));
    
            var winsParameter = wins.HasValue ?
                new ObjectParameter("Wins", wins) :
                new ObjectParameter("Wins", typeof(int));
    
            var lossesParameter = losses.HasValue ?
                new ObjectParameter("Losses", losses) :
                new ObjectParameter("Losses", typeof(int));
    
            var tiesParameter = ties.HasValue ?
                new ObjectParameter("Ties", ties) :
                new ObjectParameter("Ties", typeof(int));
    
            var sortOrder1Parameter = sortOrder1.HasValue ?
                new ObjectParameter("SortOrder1", sortOrder1) :
                new ObjectParameter("SortOrder1", typeof(double));
    
            var sortOrder2Parameter = sortOrder2.HasValue ?
                new ObjectParameter("SortOrder2", sortOrder2) :
                new ObjectParameter("SortOrder2", typeof(double));
    
            var sortOrder3Parameter = sortOrder3.HasValue ?
                new ObjectParameter("SortOrder3", sortOrder3) :
                new ObjectParameter("SortOrder3", typeof(double));
    
            var sortOrder4Parameter = sortOrder4.HasValue ?
                new ObjectParameter("SortOrder4", sortOrder4) :
                new ObjectParameter("SortOrder4", typeof(double));
    
            var sortOrder5Parameter = sortOrder5.HasValue ?
                new ObjectParameter("SortOrder5", sortOrder5) :
                new ObjectParameter("SortOrder5", typeof(double));
    
            var sortOrder6Parameter = sortOrder6.HasValue ?
                new ObjectParameter("SortOrder6", sortOrder6) :
                new ObjectParameter("SortOrder6", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_EventRanking", seasonParameter, eventCodeParameter, teamNumberParameter, dqCountParameter, matchesPlayedParameter, qualAverageParameter, rankParameter, winsParameter, lossesParameter, tiesParameter, sortOrder1Parameter, sortOrder2Parameter, sortOrder3Parameter, sortOrder4Parameter, sortOrder5Parameter, sortOrder6Parameter);
        }
    
        public virtual int Update_Registration(Nullable<int> season, Nullable<int> teamNumber, string eventCode)
        {
            var seasonParameter = season.HasValue ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(int));
    
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            var eventCodeParameter = eventCode != null ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Registration", seasonParameter, teamNumberParameter, eventCodeParameter);
        }
    
        public virtual int Update_Team(Nullable<int> teamNumber, string shortName, string fullName, string city, string stateProv, string country, string districtCode, Nullable<int> rookieYear, string robotName, string webSite, string schoolName, string homeCMP)
        {
            var teamNumberParameter = teamNumber.HasValue ?
                new ObjectParameter("TeamNumber", teamNumber) :
                new ObjectParameter("TeamNumber", typeof(int));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateProvParameter = stateProv != null ?
                new ObjectParameter("StateProv", stateProv) :
                new ObjectParameter("StateProv", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var districtCodeParameter = districtCode != null ?
                new ObjectParameter("DistrictCode", districtCode) :
                new ObjectParameter("DistrictCode", typeof(string));
    
            var rookieYearParameter = rookieYear.HasValue ?
                new ObjectParameter("RookieYear", rookieYear) :
                new ObjectParameter("RookieYear", typeof(int));
    
            var robotNameParameter = robotName != null ?
                new ObjectParameter("RobotName", robotName) :
                new ObjectParameter("RobotName", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var homeCMPParameter = homeCMP != null ?
                new ObjectParameter("HomeCMP", homeCMP) :
                new ObjectParameter("HomeCMP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Team", teamNumberParameter, shortNameParameter, fullNameParameter, cityParameter, stateProvParameter, countryParameter, districtCodeParameter, rookieYearParameter, robotNameParameter, webSiteParameter, schoolNameParameter, homeCMPParameter);
        }
    }
}
